(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function CreateEvent(evt) {

	if (document.createEvent) {

		var event = document.createEvent('CustomEvent');
		event.initEvent(evt, true, true);
		return event;
	} else {
		return new Event(evt);
	}
}

module.exports = { CreateEvent: CreateEvent };

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = __webpack_require__(0),
    CreateEvent = _require.CreateEvent;

var _require2 = __webpack_require__(2),
    lazyLoadImage = _require2.lazyLoadImage;

var onLoadEventName = 'lazyload';
var onLoad = CreateEvent(onLoadEventName);
var lazySrcDataAttribute = 'data-lazy-src';

/**
 *
 * LazyLoad
 *
 * The base class that provides the functionality to lazy load images, picture elements and CSS background images.
 * LazyLoad doesn't auto trigger any lazy load behaviour internally, it just provides an event driven interface to do so.
 *
 */

var LazyLoad = function () {
  function LazyLoad(selector) {
    _classCallCheck(this, LazyLoad);

    var images = Array.from(document.querySelectorAll(selector));

    if (!images.length) {
      console.warn('No elements matching the selector ' + selector + ' were found, LazyLoad could not initialise');
      return;
    }

    // store lazy load data for each element
    this.images = images.map(function (image) {
      return {
        image: image,
        resolved: false,
        src: getLazySrc(image)
      };
    });

    // listen for the lazyload event on each element
    this.images.forEach(function (lazyImage) {
      lazyImage.image.addEventListener(onLoadEventName, lazyLoadImage.bind(lazyImage));
    });
  }

  // fire lazyload event on element to begin attempting to load


  LazyLoad.prototype.fireLazyEvent = function fireLazyEvent(image) {
    image.dispatchEvent(onLoad);
  };

  return LazyLoad;
}();

// get the filepath to load for each element within an instance


function getLazySrc(image) {

  // if the element is not a picture element return its `data-lazy-src` attribute
  var src = image.getAttribute(lazySrcDataAttribute);

  if (src) {
    return src;
  }

  // if the element is a picture element return an array of srcs from its children (source and img elements)
  var srcs = Array.from(image.children).map(function (child) {

    /**
     *
     * The picturefill polyfill wraps a video element around source elements in IE9.
     * If this is the case the `data-lazy-src` attributes need to be retrieved from within the video element.
     * The srcs will be returned as an array if this is the case so will need flattening.
     *
     */

    if (child.constructor === HTMLVideoElement) {
      return Array.from(child.children).map(function (videoChild) {
        return videoChild.getAttribute(lazySrcDataAttribute);
      });
    } else {
      return child.getAttribute(lazySrcDataAttribute);
    }
  });

  // flatten the array if necessary
  return [].concat.apply([], srcs);
}

module.exports = { LazyLoad: LazyLoad };

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _require = __webpack_require__(0),
    CreateEvent = _require.CreateEvent;

var onCompleteEventName = 'lazyloadcomplete';
var onErrorEventName = 'lazyloaderror';
var onComplete = CreateEvent(onCompleteEventName);
var onError = CreateEvent(onErrorEventName);

/**
 *
 * loadImage
 *
 * @param { String or Array } src
 * @param { HTMLImageObject } image
 *
 * @return { Promise }
 *
 * Sets the `src` on an image element or `srcset` of source and image elements within a picture element.
 * Responds to its load / error events.
 *
 */

function loadImage(src, image) {

  return new Promise(function (resolve, reject) {

    function onLoad() {
      removeListeners();
      resolve(true);
    }

    function onError() {
      removeListeners();
      reject(false);
    }

    function removeListeners() {
      image.removeEventListener('load', onLoad);
      image.removeEventListener('error', onError);
    }

    image.addEventListener('load', onLoad);
    image.addEventListener('error', onError);

    /**
     *
     * If the image is within a picture element, set srcset on each child.
     * Browsers that don't support HTMLPictureElement will report it as an instance of a HTMLUnknownElement.
     *
     */

    if (image.parentNode && image.parentNode.constructor === window.HTMLPictureElement || image.parentNode && typeof window.HTMLPictureElement === 'undefined' && image.parentNode.constructor === HTMLUnknownElement) {

      Array.from(image.parentNode.children).forEach(function (child, i) {

        // IE9 polyfill approach is to use a video element around the source elements
        if (child.constructor !== HTMLVideoElement) {
          child.setAttribute('srcset', src[i]);
        } else {

          // the source elements will be children of the video element in ie9
          Array.from(child.children).forEach(function (videoChild, j) {
            videoChild.setAttribute('srcset', src[i + j]);
          });
        }
      });
    } else {
      image.setAttribute('src', src);
    }
  });
}

// fired upon receipt of the `lazyload` event for each element stored in a LazyLoad instance
function lazyLoadImage() {
  var image = this.image,
      src = this.src;

  // create a dummy image to capture load / error events

  var lazyImage = new Image();

  // if it's a picture element, re-assign the dummy image to the img element within the picture element
  if (image.constructor === window.HTMLPictureElement || typeof window.HTMLPictureElement === 'undefined' && image.constructor === HTMLUnknownElement) {
    lazyImage = image.querySelector('img');
  }

  // get the appropriate callback to fire once an image has loaded
  var onImageLoad = getOnLoadCallback(image);

  loadImage(src, lazyImage).then(function () {
    onImageLoad(image, src);
    image.dispatchEvent(onComplete);
  }).catch(function () {
    image.dispatchEvent(onError);
  });
}

function getOnLoadCallback(image) {
  switch (true) {
    case image.constructor === HTMLImageElement:
      return onShowImage;
    case image.constructor !== window.HTMLPictureElement:
      return onShowBackgroundImage;
    default:

      // empty function callback for picture element
      return function () {};
  }
}

function onShowImage(image, src) {
  image.setAttribute('src', src);
}

function onShowBackgroundImage(div, src) {
  div.style.backgroundImage = 'url(' + src + ')';
}

module.exports = {
  lazyLoadImage: lazyLoadImage,
  loadImage: loadImage,
  getOnLoadCallback: getOnLoadCallback,
  onShowImage: onShowImage,
  onShowBackgroundImage: onShowBackgroundImage
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// taken from http://underscorejs.org/#debounce
function debounce(callback, wait, immediate) {

  var timeout = void 0;

  return function bounce() {

    var context = this;
    var args = arguments;

    function later() {
      timeout = null;
      if (!immediate) {
        callback.apply(context, args);
      }
    }

    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);

    if (callNow) {
      callback.apply(context, args);
    }
  };
}

module.exports = { debounce: debounce };

/***/ }),
/* 4 */,
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var _require = __webpack_require__(1),
    LazyLoad = _require.LazyLoad;

var _require2 = __webpack_require__(3),
    debounce = _require2.debounce;

var lazyTargetDataAttribute = 'data-lazy-target';

/**
 *
 * LazyProximity
 *
 * Define triggers for lazy load elements.
 * Elements will begin lazy loading when the cursor is over a trigger or it receives a click.
 *
 */

var LazyProximity = function (_LazyLoad) {
  _inherits(LazyProximity, _LazyLoad);

  function LazyProximity(imageSelector, proximitySelector) {
    _classCallCheck(this, LazyProximity);

    var _this = _possibleConstructorReturn(this, _LazyLoad.call(this, imageSelector));

    if (!_this.images.length) {
      console.warn('No elements matching the selector ' + imageSelector + ' were found, LazyProximity could not initialise');
      return _possibleConstructorReturn(_this);
    }

    var proximityTriggers = getProximityTriggers.call(_this, proximitySelector);

    if (!proximityTriggers.length) {
      console.warn('No elements matching the selector ' + proximityTriggers + ' were found, LazyProximity could not initialise');
      return _possibleConstructorReturn(_this);
    }

    // store additional proximity data for each element contained in an instance of LazyProximity
    _this.images = _this.images.map(function (lazyImage) {

      var lazyProximityTrigger = void 0,
          onClickCallback = void 0;

      // loop through all triggers
      proximityTriggers.forEach(function (proximityTrigger) {

        // when a trigger's target is found
        var isTarget = proximityTrigger.targets.some(function (target) {
          return target === lazyImage.image;
        });

        // add its trigger and click callback to the target's data on the instance
        if (isTarget) {
          lazyProximityTrigger = proximityTrigger.trigger;
          onClickCallback = proximityTrigger.onClickCallback;
        }
      });

      return _extends({}, lazyImage, {
        lazyProximityTrigger: lazyProximityTrigger,
        onClickCallback: onClickCallback
      });
    });

    // capture mousemove on document to detect hover over trigger
    _this.onMouseMove = debounce(onMouseMove.bind(_this), 100);
    document.addEventListener('mousemove', _this.onMouseMove);

    return _this;
  }

  return LazyProximity;
}(LazyLoad);

// find all trigger elements and their lazy load targets


function getProximityTriggers(proximitySelector) {
  var _this2 = this;

  return Array.from(document.querySelectorAll(proximitySelector)).map(function (trigger) {

    // get all targets for the trigger
    var targets = Array.from(document.querySelectorAll(trigger.getAttribute(lazyTargetDataAttribute)));

    // store a reference to it for removal later
    var onClickCallback = onClick.bind(_this2);
    trigger.addEventListener('click', onClickCallback);

    return {
      trigger: trigger,
      targets: targets,
      onClickCallback: onClickCallback
    };
  });
}

function getUnloadedImages(images) {
  return images.filter(function (lazyImage) {
    return !lazyImage.resolved;
  });
}

// detect when the cursor is over a trigger element
function onMouseMove(evt) {
  var _this3 = this;

  // if there are no images remaining to load, remove the mousemove listener
  var unloadedImages = getUnloadedImages(this.images);
  if (unloadedImages.length === 0) {
    document.removeEventListener('mousemove', this.onMouseMove);
    return;
  }

  // find the element that the mouse is over
  var clientX = evt.clientX,
      clientY = evt.clientY;

  var trigger = document.elementFromPoint(clientX, clientY);

  // loop through the remaining unloaded images
  unloadedImages.forEach(function (lazyImage) {
    var lazyProximityTrigger = lazyImage.lazyProximityTrigger,
        onClickCallback = lazyImage.onClickCallback,
        image = lazyImage.image;


    if (lazyProximityTrigger) {

      // if the element the mouse is over is the trigger, or is a child of the trigger
      if (lazyProximityTrigger === trigger || lazyProximityTrigger.contains(trigger)) {

        // load the lazy element, remove its click handler and set it as resolved
        _this3.fireLazyEvent(image);
        lazyImage.resolved = true;
        lazyProximityTrigger.removeEventListener('click', onClickCallback);
      }
    }
  });
}

// detect click on trigger
function onClick(evt) {
  var _this4 = this;

  var target = evt.target;

  // loop through images

  this.images.forEach(function (lazyImage) {
    var lazyProximityTrigger = lazyImage.lazyProximityTrigger,
        image = lazyImage.image,
        onClickCallback = lazyImage.onClickCallback;


    if (lazyProximityTrigger) {

      // match the clicked trigger with a saved trigger
      if (lazyProximityTrigger === target) {

        // and load that trigger's lazy element
        _this4.fireLazyEvent(image);
        lazyImage.resolved = true;
        lazyProximityTrigger.removeEventListener('click', onClickCallback);
      }
    }
  });
}

module.exports = {
  LazyProximity: LazyProximity,
  getProximityTriggers: getProximityTriggers
};

/***/ })
/******/ ]);
});