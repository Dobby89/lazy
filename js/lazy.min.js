(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = __webpack_require__(6),
    createEvent = _require.createEvent;

var _require2 = __webpack_require__(2),
    lazyLoadImage = _require2.lazyLoadImage;

var onLoadEventName = 'lazyload';
var onLoad = createEvent(onLoadEventName);
var lazySrcDataAttribute = 'data-lazy-src';

/**
 *
 * LazyLoad
 *
 * The base class that provides the functionality to lazy load images, picture elements and CSS background images.
 * LazyLoad doesn't auto trigger any lazy load behaviour internally, it just provides an event driven interface to do so.
 *
 */

var LazyLoad = function () {
	function LazyLoad(selector) {
		_classCallCheck(this, LazyLoad);

		// Create an array of all the images matching the given selector
		var images = Array.from(document.querySelectorAll(selector));

		// Warn user if no images found
		if (!images.length) {
			console.warn('No elements matching the selector ' + selector + ' were found, LazyLoad could not initialise');
			return;
		}

		// store lazy load data for each element
		this.images = images.map(function (image) {
			return {
				image: image,
				resolved: false,
				src: getLazySrc(image)
			};
		});

		// listen for the lazyload event on each element
		this.images.forEach(function (lazyImage) {
			lazyImage.image.addEventListener(onLoadEventName, lazyLoadImage.bind(lazyImage));
		});
	}

	// fire lazyload event on element to begin attempting to load


	LazyLoad.prototype.fireLazyLoadEvent = function fireLazyLoadEvent(image) {
		image.dispatchEvent(onLoad);
	};

	return LazyLoad;
}();

// get the filepath to load for each element within an instance


function getLazySrc(image) {

	// if the element is not a picture element return its `data-lazy-src` attribute
	var src = image.getAttribute(lazySrcDataAttribute);

	if (src) {
		return src;
	}

	// if the element is a picture element return an array of srcs from its children (source and img elements)
	var srcs = Array.from(image.children).map(function (child) {

		/**
   *
   * The picturefill polyfill wraps a video element around source elements in IE9.
   * If this is the case the `data-lazy-src` attributes need to be retrieved from within the video element.
   * The srcs will be returned as an array if this is the case so will need flattening.
   *
  */

		if (child.constructor === HTMLVideoElement) {
			return Array.from(child.children).map(function picturefillMap(videoChild) {
				return videoChild.getAttribute(lazySrcDataAttribute);
			});
		}

		return child.getAttribute(lazySrcDataAttribute);
	});

	// flatten the array if necessary
	return [].concat.apply([], srcs);
}

module.exports = { LazyLoad: LazyLoad };

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _require = __webpack_require__(6),
    createEvent = _require.createEvent;

var onCompleteEventName = 'lazyloadcomplete';
var onErrorEventName = 'lazyloaderror';
var onComplete = createEvent(onCompleteEventName);
var onError = createEvent(onErrorEventName);

/**
 *
 * loadImage
 *
 * @param { String or Array } src
 * @param { HTMLImageObject } image
 *
 * @return { Promise }
 *
 * Sets the `src` on an image element or `srcset` of source and image elements within a picture element.
 * Responds to its load / error events.
 *
 */

function loadImage(src, image) {
	return new Promise(function (resolve, reject) {
		function onLoad() {
			removeListeners();
			resolve(true);
		}

		function errorHandler() {
			removeListeners();
			reject(false);
		}

		function removeListeners() {
			image.removeEventListener('load', onLoad);
			image.removeEventListener('error', errorHandler);
		}

		image.addEventListener('load', onLoad);
		image.addEventListener('error', errorHandler);

		/**
   *
   * If the image is within a picture element, set srcset on each child.
   * Browsers that don't support HTMLPictureElement will report it as an instance of a HTMLUnknownElement.
   *
  */

		if (image.parentNode && image.parentNode.constructor === window.HTMLPictureElement || image.parentNode && typeof window.HTMLPictureElement === 'undefined' && image.parentNode.constructor === window.HTMLUnknownElement || image.parentNode && typeof window.HTMLPictureElement === 'undefined' && image.parentNode.constructor === window.HTMLElement) {
			Array.from(image.parentNode.children).forEach(function (child, i) {
				// IE9 polyfill approach is to use a video element around the source elements
				if (child.constructor !== HTMLVideoElement) {
					child.setAttribute('srcset', src[i]);
				} else {
					// the source elements will be children of the video element in ie9
					Array.from(child.children).forEach(function (videoChild, j) {
						videoChild.setAttribute('srcset', src[i + j]);
					});
				}
			});
		} else {
			image.setAttribute('src', src);
		}
	});
}

// fired upon receipt of the `lazyload` event for each element stored in a LazyLoad instance
function lazyLoadImage() {
	var image = this.image,
	    src = this.src;

	// create a dummy image to capture load / error events

	var lazyImage = new Image();

	// if it's a picture element, re-assign the dummy image to the img element within the picture element
	if (image.constructor === window.HTMLPictureElement || typeof window.HTMLPictureElement === 'undefined' && image.constructor === window.HTMLUnknownElement || typeof window.HTMLPictureElement === 'undefined' && image.constructor === window.HTMLElement) {
		lazyImage = image.querySelector('img');
	}

	// get the appropriate callback to fire once an image has loaded
	var onImageLoad = getOnLoadCallback(image);

	loadImage(src, lazyImage).then(function loadedImage() {
		onImageLoad(image, src);
		image.dispatchEvent(onComplete);
	}).catch(function loadingImageFailed(err) {
		image.dispatchEvent(onError);
	});
}

function getOnLoadCallback(image) {
	switch (true) {
		case image.constructor === HTMLImageElement:
			return onShowImage;

		// empty function callback for picture element
		case image.constructor === window.HTMLPictureElement || typeof window.HTMLPictureElement === 'undefined' && image.constructor === window.HTMLUnknownElement || typeof window.HTMLPictureElement === 'undefined' && image.constructor === window.HTMLElement:
			return function () {};

		default:
			return onShowBackgroundImage;
	}
}

function onShowImage(image, src) {
	image.setAttribute('src', src);
}

function onShowBackgroundImage(div, src) {
	div.style.backgroundImage = 'url(' + src + ')';
}

module.exports = {
	lazyLoadImage: lazyLoadImage,
	loadImage: loadImage,
	getOnLoadCallback: getOnLoadCallback,
	onShowImage: onShowImage,
	onShowBackgroundImage: onShowBackgroundImage
};

/***/ }),
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// taken from http://underscorejs.org/#debounce
function debounce(callback, wait, immediate) {
	var timeout = void 0;

	return function bounce() {
		var context = this;
		var args = arguments;

		function later() {
			timeout = null;

			if (!immediate) {
				callback.apply(context, args);
			}
		}

		var callNow = immediate && !timeout;
		clearTimeout(timeout);
		timeout = setTimeout(later, wait);

		if (callNow) {
			callback.apply(context, args);
		}
	};
}

function createEvent(evt) {
	if (document.createEvent) {
		var event = document.createEvent('CustomEvent');
		event.initEvent(evt, true, true);
		return event;
	}

	return new Event(evt);
}

module.exports = { debounce: debounce, createEvent: createEvent };

/***/ })
/******/ ]);
});